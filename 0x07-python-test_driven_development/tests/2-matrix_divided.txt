
A documentation for the module "2-matrix_divided.py" that contains a function
of prototype "def matrix_divided(matrix, div):"

>>> matrix_divided =  __import__('2-matrix_divided').matrix_divided

-> matrix must be a list of lists of integers or floats, otherwise raises a TypeError

 exception with the message "matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1, 3, 3,], [1, 'v', 'j'], [0, 9, 8]], 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

-> Each row of the matrix must be of the same size, otherwise raises a TypeError
 exception with the message "Each row of matrix must have the same size"

>>> matrix_divided([[1, 2, 3], [4, 5], [6, 7, 8]], 8)
Traceback (most recent call last):
 ...
TypeError: Each row of the matrix must have the same size

-> div must be a number (integer or float), otherwise raises a TypeError exception with the message "div must be a number"

>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], "a")
Traceback (most recent call last):
...
TypeError: div must be a number

-> div can't be equal to  0, otherwise raises  a ZeroDivisionError exception with the message "division by zero"

>>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

-> All elements of the matrix are divided by div, and round to 2 decimal places
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

-> Returns a new matrix

>>> matrix_divided(None, None)
Traceback (most recent call last):
...
TypeError: div must be a number

>>> matrix_divided([None, [1, 2, 3], [4, 5, 6]], 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1, 2, None], [4, 5, 6]], 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
